% Demonstrate channel control with @pause and @resume.
%
% This will print:
%
% Logout user1 10.10.10.10
% Query user2 30.30.30.30
% Suspicious login user2 30.30.30.30 40.40.40.40
% Pattern detected: [[[user1,async,0,request,[logout,user1,10.10.10.10]]]] 
% Update user2 30.30.30.30
% Suspicious login user2 30.30.30.30 50.50.50.50
% Suspicious login user2 40.40.40.40 50.50.50.50
% Pattern detected: [[[user2,async,0,request,[query,user2,30.30.30.30]], [user2,async,0,request,[update,user2,30.30.30.30]], [user2,async,0,request,[login,user2,50.50.50.50]]]] 
% Pattern detected: [[[user2,async,0,request,[login,user2,50.50.50.50]]]] 
%
% Note that the pair of logins from 30.30.30.30 followed by 40.40.40.40 is not the pattern
%    as the 'query' event pauses detection of further logins until the 'update' event is detected.

:- eval(server()). 

server() :-
	% Start detection on each new login
	rcvMult(XID,Protocol,From,request,login(User,IP)),
	server_1(XID,User,IP).

server_1(XID,User,IP) :-
	@group(g1) @id(id1)
	rcvMsg(XID,Protocol,From,request,login(User,IP2)) [IP2!=IP],
	println(["Suspicious login",User,IP,IP2]," ").
server_1(XID,User,IP) :-
	@group(g1)
	rcvMsg(XID,Protocol,From,request,logout(User,IP)),
	println(["Logout",User,IP]," ").
server_1(XID,User,IP) :-
	@group(g1) @resume(id1)
	rcvMsg(XID,Protocol,From,request,update(User,IP)),
	println(["Update",User,IP]," ").
server_1(XID,User,IP) :-
	@group(g1) @pause(id1)
	rcvMsg(XID,Protocol,From,request,query(User,IP)),
	println(["Query",User,IP]," ").
server_1(XID,User,IP) :-
	@or(g1) @timeout(1000)
	rcvMsg(XID,Protocol,From,or,Events),
	println(["Pattern detected: ",Events," "]).

:- eval(client()). 

client() :- 
	% Send all the test messages from a separate thread
	switch_thread(),

	% Use user-id as conversation-id (XID) for partitioning so that each user is processed sequentially
	sendMsg(user1,async,0,request,login(user1,'10.10.10.10')),
	java.lang.Thread.sleep(200L),
	sendMsg(user2,async,0,request,login(user2,'30.30.30.30')),
	java.lang.Thread.sleep(300L),
	sendMsg(user1,async,0,request,logout(user1,'10.10.10.10')),
	sendMsg(user1,async,0,request,login(user1,'20.20.20.20')),
	% This is a terminator
	sendMsg(user2,async,0,request,query(user2,'30.30.30.30')),
	sendMsg(user2,async,0,request,login(user2,'40.40.40.40')),
	sendMsg(user2,async,0,request,update(user2,'30.30.30.30')),
	sendMsg(user2,async,0,request,login(user2,'50.50.50.50')).

switch_thread() :-
	sendMsgSync(XID,task,0,switch,[]),
	rcvMsg(XID,task,From,switch,[]).
