% Demonstrate an @and group with equational constraints using context variables.
% Only the first pair is detected since reactions for login and logout have default multiplicity of one.
% and_multi_repeated.prova shows how to detect more than one pair.
%
% This will print:
%
% Pattern detected: [[[q1,async,0,request,[login,user1,10.10.10.10]], [q1,async,0,request,[logout,user1,10.10.10.10]]]]

:- eval(server()). 

server() :-
	server_1().

server_1() :-
	@group(g1) @vars(User,IP)
	rcvMsg(q1,Protocol,From,request,login(User,IP)).
server_1() :-
	@group(g1) @vars(User,IP)
	rcvMsg(q1,Protocol,From,request,logout(User,IP)).
server_1() :-
	@and(g1) @timeout(2000)
	rcvMsg(q1,Protocol,From,and,Events),
	println(["Pattern detected: ",Events," "]).
	
:- eval(client()). 

client() :- 
	% Send all the test messages from a separate thread
	switch_thread(),

	% Use user-id as conversation-id (XID) for partitioning so that each user is processed sequentially
	sendMsg(q1,async,0,request,login(user1,'10.10.10.10')),
	% Wait synchronously, could have waited asynchronously instead
	java.lang.Thread.sleep(500L),
	sendMsg(q1,async,0,request,login(user2,'30.30.30.30')),
	java.lang.Thread.sleep(700L),
	sendMsg(q1,async,0,request,logout(user1,'10.10.10.10')),
	% If this message arrives before the previous one, it removes the logout reaction above, preventing the chance
	%    of a logout matching (user1,10.10.10.10) being detected.
	% The @count annotation must be used to allow for reaction to stay and accumulate the matches (see and_multi_repeated.prova).
	sendMsg(q1,async,0,request,logout(user2,'30.30.30.30')),
	sendMsg(q1,async,0,request,login(user1,'20.20.20.20')),
	java.lang.Thread.sleep(1500L),
	sendMsg(q1,async,0,request,login(user2,'40.40.40.40')).

switch_thread() :-
	sendMsgSync(XID,task,0,switch,[]),
	rcvMsg(XID,task,From,switch,[]).
