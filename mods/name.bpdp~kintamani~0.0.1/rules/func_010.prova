% Demonstrate a simple variant of stream fusion like functionality.
% The double map results in the state variable (sum) being threaded for each
%   element in the supplied list.
% This is close to Scala code below but does not have recursion or list copying. 
%   def scalaLibrarySum(a : Array[Int]) = a.map(i => i * 3 + 7).filter(i => (i % 10) == 0).foldLeft(0)(_ + _)

:- eval(consult('functional.prova')).

% This returns:
% SF1=[state,[[list,10,40],50]]
:-solve(stream_fusion_1(SF1)).

a I S : IM S = IM=I*3+7.

% The returned list(I) appends I to the result list
b I S : list(I) SM = 0=I mod 10, !, SM=S+I.
% The returned list() allows I to be skipped in the result list
b I S : list() S.

stream_fusion_1(X) :-
	map [map([a,b])] state([list(1,-1,3,11),0]) : X.
